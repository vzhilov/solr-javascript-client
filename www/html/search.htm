<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Результат поиска</title>
  <meta name="description" value="The search engine that doesn't track you. Learn More.">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="./css/colors.css">
  <link rel="stylesheet" type="text/css" href="./css/modal.css">
  <link rel="stylesheet" type="text/css" href="./css/serp.css?1">
  <link rel="icon" type="image/png" href="./img/se.png">
  <meta name="author" value="vanGato">
  <script src="./conf/conf.js"></script>
  <script>
	function domLoaded() {

		const hostname = window.location.hostname
		document.getElementById('host').innerText = hostname
		document.getElementById('year').innerText = new Date().getFullYear()

		document.getElementsByName("q")[0].addEventListener("keydown", function(e) {
			//if (!e) { var e = window.event; }
			//e.preventDefault(); // sometimes useful

			// Enter is pressed
			if (e.keyCode == 13) { searchGo(); }
		}, false);
		
		if(window.location.search) {
			const urlParams = new URLSearchParams(window.location.search);
			const q = urlParams.get('q');
			document.getElementsByName("q")[0].value = q;
			window.history.replaceState(null, null, window.location.pathname);
			searchGo();
		}

		let formData = new FormData(); 
		formData.append("q", "id:*");
		formData.append("rows", 0);
		
		var xmlHttp = new XMLHttpRequest();
		xmlHttp.onreadystatechange = function() {
			if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
			  const resSolr = JSON.parse(xmlHttp.responseText);
			  const totalDocs = resSolr.response.numFound;
			  document.getElementById("totalDocs").innerHTML = totalDocs;
			}
		}
		xmlHttp.open("POST", "http://" + host + ":8983/solr/" + collection + "/select");  
		xmlHttp.send(formData); 


		
	}  
  </script>
</head>
<body onload="domLoaded();">
  <div class="serp">
    <div class="serp__layout">
      <div class="serp__header">
        <div class="serp__search">
          <a class="serp__logo" href="index.htm"></a>
          <div class="serp__form">
            <div>
              <input name="q" type="search" value=""
                     class="serp__query" 
                     maxlength="512"
                     autocomplete="off"
                     title="Search"
                     aria-label="Search"
                     dir="ltr"
                     spellcheck="false"
                     autofocus="autofocus"
              >
            </div>
            <button class="serp__button" onclick="searchGo()">
              <div class="serp__ico"></div>
            </button>
          </div>
        </div>

        <ul class="serp__nav">
          <li>Найдено <span id="docsFound">0</span> документов</li>
          <li class="params"> | Установить между искомыми:
			<span class="search-params prox" onClick="fillApprox();">не более 5 слов</span>
		  </li>
        </ul>

      </div>
    </div>
    <div class="serp__body">
      <div class="serp__main serp__results">
        <div class="serp__web">
          <span class="serp__label">Реклама</span>
          <div class="serp__result">
            <a href="https://scripd.space" target="_blank">
              <div class="serp__title">Надежная почта</div>
              <span class="serp__ad">Реклама</span> 
              <span class="serp__url">https://scripd.space</span>
            </a><br>
            <span class="serp__description">Быстрая и безопасная почта. Плюс облако для документов. Адрес на @scientology.ru в подарок!</span>
          </div>
        </div>
		<!-- Magnifying glass for search wait -->
		<div class="magnifying-container-sm unvisible">
		  <div class="magnifying">
		    <div class="handle"></div>
		    <div class="middle"></div>
		    <div class="top"></div>
		  </div>
		</div>		
		<!-- End of Magnifying glass block -->
        <div class="serp__web" id="searchRes">
        </div>
        <div class="serp__pagination">
          <ul id="paging">
          </ul>
        </div>
      </div>
      <div class="serp__sidebar">
        <div class="serp__sticky">
          <div class="serp__headline">
			<h2>Похожие запросы:</h2>
		  </div>
          <div class="serp__wiki">
			<div class="suggester"></div>

          </div>
        </div>
      </div>
    </div>
    <div class="serp__footer">
      <div class="serp__bottom">
        <ul class="serp__links">
          <li><a href="#">
			&copy; <span id="year"></span>&nbsp;<span id="host"></span>
			</a>
		  </li>
          <li><a href="#"><span>Всего в базе <span id="totalDocs">0</span> документов</span></a></li>
        </ul>
 
	  
    </div>
  </div>
<script>
function searchGo(page = 0) {
  const searchRes = document.getElementById("searchRes");
  searchRes.innerHTML = '';
	
  const pageBlock = document.getElementById("paging");
  pageBlock.innerHTML = '';

  document.getElementsByClassName("magnifying-container-sm")[0]
	.classList.remove("unvisible");

  const q = document.getElementsByName("q")[0].value
  const s = "subject_ru:(" + q + ") attach_content_ru:(" + q + ") subject_en:(" + q + ") attach_content_en:(" + q + ")";
  const resPerPage = 20
  const row = page * resPerPage

  let formData = new FormData(); 
  formData.append("hl", "on");
  formData.append("hl.fl", "attach_content_ru,attach_content_en");
  formData.append("start", row);
  formData.append("rows", resPerPage);
  formData.append("q", s);
  
  var xmlHttp = new XMLHttpRequest();
  xmlHttp.onreadystatechange = function() {
    if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
	  document.getElementsByClassName("magnifying-container-sm")[0]
		.classList.add("unvisible");

	  const resSolr = JSON.parse(xmlHttp.responseText);
	  const docsFound = resSolr.response.numFound;
	  const docsArray = resSolr.response.docs

//console.log(resSolr);

	  const docsFoundEl = document.getElementById("docsFound");
	  docsFoundEl.innerHTML = docsFound;

	  
	  if (docsFound > 0) {

		  // Build pagination
		  const pageTotal = Math.ceil(docsFound / resPerPage)
		  for (i=0;i<pageTotal;i++) {
			const pageEl = document.createElement('li');
			if (i == 0) {
				const pageLeft = document.createElement('li');
				const pageLeftRowHtml = '<a href="/" onclick="pageChange(0);event.preventDefault();"></a>';				
				pageLeft.innerHTML = pageLeftRowHtml
				pageBlock.append(pageLeft);
			}
			if (i == page) {
				pageEl.classList.add("serp__pagination-active");
				pageEl.setAttribute('page', i)
			}
			let pageNumberHtml = '<a href="/" onclick="searchGo(' + (i) + ');event.preventDefault();"></a>';
			pageEl.innerHTML = pageNumberHtml
			pageBlock.append(pageEl);
			
			if (i == pageTotal-1) {
				const pageRight = document.createElement('li');			
				const pageRightRowHtml = '<a href="/" onclick="pageChange(1);event.preventDefault();"></a>';			
				pageRight.innerHTML = pageRightRowHtml
				pageBlock.append(pageRight);
			}
		  }

		  // Output search results
		  docsArray.forEach(function(singleDoc) {
			const resKey = singleDoc.id
			let resDate = singleDoc.last_modified.replace("T", " ").replace("Z", "");
			resDate = resDate.substr(0, resDate.lastIndexOf(":"));
			const resTitle = getFieldVal(singleDoc, "subject");
			const resPath = singleDoc.attach_dir + "/" + getFieldVal(singleDoc, "attach") + "<span class='serp-sep'> | </span><span class='serp-date'>" + resDate + "</span>";
			const hca = getFieldVal(resSolr.highlighting[resKey], "attach_content");
			let resExcerpt = "";
			if (hca != undefined) {
			  hca.forEach(function(item) {
				resExcerpt = resExcerpt + item
			  })
			}
			
			const resEntryHtml = '<a href="/result.htm?id=' + resKey + '&q=' + q.replace(/[^а-яА-Яa-zA-Z ]+/g, '') + '" target="_blank">\
				  <div class="serp__title">' + resTitle + '</div></a>\
				    <div class="serp__url">Общая/' + resPath + '</div>\
				<span class="serp__description">' + resExcerpt + '</span>';
			  //</div>';
			const resEntry = document.createElement('div');
			resEntry.classList.add("serp__result");
			resEntry.innerHTML = resEntryHtml
			const searchBlock = document.getElementById("searchRes");
			searchBlock.append(resEntry);
			<!--<span class="serp__match">labore et dolore</span>-->
		  })
		} else {
			const resEntryHtml = '<p><strong>По запросу &laquo;' + q + '&raquo; ничего не найдено.</strong></p>\
          <p>Рекомендации:</p>\
          <ul>\
            <li>Убедитесь, что все слова написаны без ошибок.</li>\
            <li>Попробуйте использовать другие ключевые слова.</li>\
            <li>Попробуйте использовать более популярные ключевые слова.</li>\
            <li>Попробуйте уменьшить количество слов в запросе.</li>\
          </ul>';
   
			const resEntry = document.createElement('div');
			resEntry.classList.add("serp__no-results");
			resEntry.innerHTML = resEntryHtml
			const searchBlock = document.getElementById("searchRes");
			searchBlock.append(resEntry);
		}
    }
  }
  xmlHttp.open("POST", "http://" + host + ":8983/solr/" + collection + "/select");  
  xmlHttp.send(formData);
  
  
  
  
  
  let suggestArray = [];

  q.split(" ").forEach(function(qWord) {

	  let formDataSuggest = new FormData(); 

	  //formDataSuggest.append("spellcheck.build", "true");
	  //formDataSuggest.append("spellcheck.reload", "true");
	  formDataSuggest.append("spellcheck", "on");

  
	  const spellq = qWord.slice(0, -1);
	  //console.log(spellq);
	  formDataSuggest.append("spellcheck.q", spellq);
	  
	  var xmlHttpSuggest = new XMLHttpRequest();
	  xmlHttpSuggest.onreadystatechange = function() {
		if (xmlHttpSuggest.readyState == 4 && xmlHttpSuggest.status == 200) {
		  //document.getElementsByClassName("magnifying-container-sm")[0]
			//.classList.add("unvisible");

		  const resSolr = JSON.parse(xmlHttpSuggest.responseText);
		  //console.log(resSolr)
		  //const docsFound = resSolr.response.numFoun;
			const docsSuggestEl = document.getElementsByClassName("suggester")[0];
			docsSuggestEl.innerHTML = '';

		  if (resSolr.spellcheck != undefined && resSolr.spellcheck.suggestions.length > 0) {

			  suggestArray = suggestArray.concat(resSolr.spellcheck.suggestions[1].suggestion)
			  //console.log(suggestArray)

			  const freqArray = suggestArray.map(a => a.freq)
			  const min = Math.min.apply(null, freqArray),
			  max = Math.max.apply(null, freqArray);
			  const freqStep = max - min
			  const fontMin = 10
			  const fontMax = 24
			  const fontStep = fontMax - fontMin
			  const fontq = freqStep/fontStep
			

			  // Output suggest results
			  suggestArray.forEach(function(singleSuggest) {
				const suggestWord = singleSuggest.word
				const suggestFreq = singleSuggest.freq
				const suggestFont = Math.floor(suggestFreq/fontq)+fontMin
				
				const sugEntryHtml = '<a href="/serp.htm?q=' + suggestWord + '" target="_blank">\
					  <span style="font-size:' + suggestFont + 'px">' + suggestWord + ' (' + suggestFreq + ')</span></a>';
				docsSuggestEl.insertAdjacentHTML('beforeend', sugEntryHtml);
			  })
			} else {

				const sugEntryHtml = '<p>Для запроса <strong>&laquo;' + q + '&raquo;</strong> рекомендаций нет </p>';
	   
				const sugEntry = document.createElement('div');
				docsSuggestEl.insertAdjacentHTML('beforeend', sugEntryHtml);		

			}
		}
	  }
	  xmlHttpSuggest.open("POST", "http://" + host + ":8983/solr/" + collection + "/spell");  
	  xmlHttpSuggest.send(formDataSuggest);  
  })  
}

function pageChange(dir) {
	const curPageEl = document.getElementsByClassName('serp__pagination-active')[0];
	const curPageN = curPageEl.getAttribute('page');
	if (dir > 0) searchGo(Number(curPageN) + 1)
	else searchGo(Number(curPageN) - 1)
}

function getFieldVal(result, field) {
	if (result[field + "_ru"] != undefined) return result[field + "_ru"];
	else return result[field + "_en"];
}

function fillApprox() {
	document.getElementsByClassName("search-params")[0].classList.remove("prox");
	let q = '"' + document.getElementsByName("q")[0].value.split('"').join('').split('~5').join('') + '"~5';
	document.getElementsByName("q")[0].value = q;
}
</script>  
</body>
</html>